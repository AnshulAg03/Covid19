{"version":3,"sources":["components/CovidChart.js","components/CountriesChart.js","components/CaseCount.js","components/Cases.js","App.js","serviceWorker.js","index.js"],"names":["CovidChart","chartRef","React","createRef","this","buildChart","title","push","props","country","myChartRef","current","getContext","data","dates","confirmed","deaths","recovered","active","forEach","record","date","a","Chart","defaults","global","elements","point","borderWidth","line","fill","type","labels","datasets","label","borderColor","pointRadius","options","hover","animationDuration","tooltips","mode","animation","duration","easing","layout","padding","left","right","legend","display","fullWidth","boxWidth","fontStyle","fontColor","text","fontSize","scales","xAxes","time","displayFormats","quarter","gridLines","ticks","maxTicksLimit","maxRotation","yAxes","id","ref","onClick","showFullscreen","Component","CountriesChart","Row","className","countries","map","index","Col","md","lg","sm","key","Cases","span","class","total","today","CaseCount","cases","todayConfirmed","todayRecovered","todayDeaths","App","filterCountry","event","target","value","filteredCountries","state","filter","toLowerCase","includes","setState","searchedCountry","worldData","fetch","then","response","json","allCountries","Object","keys","countryData","length","yesterday","Container","fluid","offset","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onKeyUp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d501f69.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Chart from 'chart.js';\n\nexport default class CovidChart extends Component {\n\n    chartRef = React.createRef();\n\n    componentDidMount() {\n        this.buildChart();\n    }\n\n    componentDidUpdate() {\n        this.buildChart();\n    }\n\n    getTitle(){\n        var title = [];\n        title.push(this.props.country);\n        return title; \n    }\n\n    buildChart() {\n\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        const data = this.props.data;\n        var dates = [];\n        var confirmed = [];\n        var deaths = [];\n        var recovered = [];\n        var active = [];\n\n        data.forEach((record) => {\n            if (record.confirmed > 0) {\n                dates.push(record.date);\n                confirmed.push(record.confirmed);\n                deaths.push(record.deaths);\n                recovered.push(record.recovered);\n                var a = 0;\n                a = record.confirmed - record.recovered - record.deaths;\n                active.push(a);\n            }\n        })\n\n        Chart.defaults.global.elements.point.borderWidth = 1;\n        Chart.defaults.global.elements.line.fill = false;\n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels: dates,\n                datasets: [\n                    {\n                        label: \"Confirmed\",\n                        data: confirmed,\n                        borderColor: '#4285F4',\n                        pointRadius: 1,\n                    },\n                    {\n                        label: \"Recovered\",\n                        data: recovered,\n                        borderColor: '#0C9D58',\n                        pointRadius: 1,\n                    },\n                    {\n                        label: \"Deaths\",\n                        data: deaths,\n                        borderColor: '#DB4337',\n                        pointRadius: 1,\n                    },\n                    {\n                        label: \"Active\",\n                        data: active,\n                        borderColor: '#F4B400',\n                        pointRadius: 1,\n                    }\n                ]\n            },\n            options: {\n                hover:{\n                    animationDuration: 500,\n                },\n                tooltips: {\n                    mode: 'nearest'\n                },\n                animation: {\n                    duration: 1000,\n                    easing: 'easeOutCirc'\n                },\n                layout: {\n                    padding: {\n                        left: 10,\n                        right: 10,\n                    }\n                },\n                legend: {\n                    display: true,\n                    fullWidth: true,\n                    labels: {\n                        boxWidth: 10,\n                        fontStyle: 'bold',\n                        fontColor: '#757575',   \n                        padding: 6,\n\n                    }\n                },\n                title: {\n                    display: true,\n                    text: this.props.country,\n                    fontSize: 20\n                },\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        time: {\n                            displayFormats: {\n                                quarter: 'MMM YYYY'\n                            }\n                        },\n                        gridLines: {\n                            display: false,\n                        },\n                        ticks: {\n                            maxTicksLimit: 7,\n                            maxRotation:0,\n                        }\n                    }],\n                    yAxes: [{\n                        ticks: {\n                            maxTicksLimit: 5,\n                            maxRotation:0,\n                        },\n                        gridLines: {\n                            display: false,\n                        },\n\n                    }\n\n                    ]\n                }\n\n            }\n        });\n    }\n    render() {\n        return (\n            <div>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                    onClick={this.showFullscreen}\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport CovidChart from './CovidChart';\nimport {Row, Col} from 'react-bootstrap';\n\n\nfunction CountriesChart(props) {\n    return (\n        //props.countries.map(country=> LineChart(country, props.data[country]))\n        <Row className=\"chart-data\">\n            {props.countries.map((country, index) =>\n                <Col className=\"country-data\" md={6} lg={4} sm={12} key={index}>\n                    {/* <TodayData data={props.data[country].splice(-2)} /> */}\n                    <CovidChart country={country} data={props.data[country]} key={country} />\n                </Col>\n            )}\n        </Row>\n    )\n};\n\n\nexport default CountriesChart;\n","import React from 'react';\nimport {Col} from 'react-bootstrap';\n\nfunction Cases(props) {\n    return (\n        <Col md={{span: 4}}>\n            {props.title}\n            <hr />\n            <div className={props.class} >\n                {props.total} \n                <span className=\"today-count\">\n                    [+{props.today}]\n                </span>\n            </div>\n        </Col>\n    )\n};\n\nexport default Cases;","import React from 'react';\nimport {Row} from 'react-bootstrap';\nimport CaseCount from './CaseCount';\n\nfunction Cases(props) {\n    \n    return (\n        <Row className={props.class}>\n            <CaseCount title=\"Total Confirmed\" total={props.cases.confirmed} class=\"total confirmed\" today={props.cases.todayConfirmed} />\n            <CaseCount title=\"Total Recovered\" total={props.cases.recovered} class=\"total recovered\" today={props.cases.todayRecovered} />\n            <CaseCount title=\"Total Deaths\" total={props.cases.deaths} class=\"total deaths\" today={props.cases.todayDeaths} />\n        </Row>\n    )\n};\n\nexport default Cases;","import React from 'react';\nimport './App.css';\nimport CountriesChart from './components/CountriesChart';\nimport Cases from './components/Cases';\nimport { Container, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: {},\n      countries: [],\n      worldData: {},\n      searchedCountry: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n      .then(response => response.json())\n      .then(json => {\n        var allCountries = Object.keys(json).map(country => country);\n        var worldData = { confirmed: 0, deaths: 0, recovered: 0, todayConfirmed: 0, todayRecovered: 0, todayDeaths: 0 }\n        allCountries.forEach((country) => {\n          let countryData = json[country];\n          const today = countryData[countryData.length - 1];\n          const yesterday = countryData[countryData.length - 2];\n          worldData.confirmed += today.confirmed;\n          worldData.recovered += today.recovered;\n          worldData.deaths += today.deaths;\n          worldData.todayConfirmed += (today.confirmed - yesterday.confirmed);\n          worldData.todayRecovered += (today.recovered - yesterday.recovered);\n          worldData.todayDeaths += (today.deaths - yesterday.deaths);\n        })\n        this.setState({\n          data: json,\n          countries: allCountries,\n          worldData: worldData,\n          searchedCountry: allCountries,\n        });\n      });\n  }\n\n  filterCountry = (event)=>{\n    var text = event.target.value;\n    var filteredCountries = this.state.countries.filter((country) => {\n      return country.toLowerCase().includes(text.toLowerCase());\n    });\n    this.setState({\n      searchedCountry : filteredCountries,\n    });\n  }\n  render() {\n\n    return (\n      <Container fluid className=\"App\">\n        <Row className=\"App-header\">\n          <Col className=\"header\" md={{ span: 2 }}>\n            Covid19\n          </Col>\n\n          <Col md={{ span: 7, offset: 1 }} >\n            <Cases cases={this.state.worldData} class=\"total-cases\" />\n          </Col>\n          <Col md={2} >\n            <InputGroup className=\"mb-3\">\n              <FormControl\n                placeholder=\"Search By Country\"\n                aria-label=\"Search By Country\"\n                aria-describedby=\"basic-addon1\" \n                onKeyUp={this.filterCountry}\n              />\n            </InputGroup>\n          </Col>\n        </Row>\n\n        <CountriesChart data={this.state.data}\n          countries={this.state.searchedCountry} />\n      </Container >\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}